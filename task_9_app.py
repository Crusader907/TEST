import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.preprocessing import OneHotEncoder
from sklearn.compose import ColumnTransformer
from sklearn.pipeline import Pipeline
import streamlit as st
import pickle


# 1. –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
@st.cache_data
def load_data():
    df = pd.read_csv('realty_data.csv')

    # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —á–∏—Å–ª–æ–≤—ã—Ö –ø–æ–ª–µ–π
    df['price'] = df['price'].astype(float)
    df['total_square'] = df['total_square'].astype(float)

    # –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ–ø—É—Å–∫–æ–≤
    df['rooms'] = df['rooms'].fillna(0).astype(int)
    df['floor'] = df['floor'].fillna(1).astype(int)

    return df


df = load_data()

# 2. –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –∏ —Ü–µ–ª–µ–≤–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
features = ['total_square', 'rooms', 'floor', 'object_type', 'city']
X = df[features]
y = df['price']


# 3. –°–æ–∑–¥–∞–Ω–∏–µ –∏ –æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏
@st.cache_resource
def train_model():
    # –ü—Ä–µ–ø—Ä–æ—Ü–µ—Å—Å–∏–Ω–≥ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
    categorical_features = ['object_type', 'city']
    numerical_features = ['total_square', 'rooms', 'floor']

    preprocessor = ColumnTransformer(
        transformers=[
            ('num', 'passthrough', numerical_features),
            ('cat', OneHotEncoder(handle_unknown='ignore'), categorical_features)
        ])

    model = Pipeline(steps=[
        ('preprocessor', preprocessor),
        ('regressor', LinearRegression())
    ])

    model.fit(X, y)
    return model


model = train_model()

# 4. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ (–¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏)
with open('realty_model.pkl', 'wb') as f:
    pickle.dump(model, f)

# 5. Streamlit –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
st.title('–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ üè†')
st.write('–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ –¥–ª—è –æ—Ü–µ–Ω–∫–∏ —Å—Ç–æ–∏–º–æ—Å—Ç–∏:')

# –§–æ—Ä–º–∞ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö
with st.form("prediction_form"):
    col1, col2 = st.columns(2)

    with col1:
        total_square = st.number_input('–û–±—â–∞—è –ø–ª–æ—â–∞–¥—å (–º¬≤)', min_value=10.0, max_value=500.0, value=50.0)
        rooms = st.selectbox('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç', [1, 2, 3, 4, 5])
        floor = st.number_input('–≠—Ç–∞–∂', min_value=1, max_value=50, value=5)

    with col2:
        object_type = st.selectbox('–¢–∏–ø –æ–±—ä–µ–∫—Ç–∞', df['object_type'].unique())
        city = st.selectbox('–ì–æ—Ä–æ–¥', df['city'].unique())

    submitted = st.form_submit_button("–û—Ü–µ–Ω–∏—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å")

# 6. –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏ –≤—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
if submitted:
    input_data = pd.DataFrame([[total_square, rooms, floor, object_type, city]],
                              columns=features)

    prediction = model.predict(input_data)[0]

    st.success(f'### –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ–º–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {prediction:,.0f} —Ä—É–±.')
    st.balloons()

    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
    st.subheader('–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –ø–æ—Ö–æ–∂–∏–º–∏ –æ–±—ä–µ–∫—Ç–∞–º–∏')
    similar = df[
        (df['object_type'] == object_type) &
        (df['city'] == city) &
        (df['rooms'] == rooms)
        ].sort_values('total_square')

    if not similar.empty:
        st.dataframe(similar[['total_square', 'price', 'address_name']])
    else:
        st.warning('–í –±–∞–∑–µ –Ω–µ—Ç –ø–æ—Ö–æ–∂–∏—Ö –æ–±—ä–µ–∫—Ç–æ–≤ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è')

# 7. –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—ã—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö
if st.checkbox('–ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ'):
    st.write(df)









